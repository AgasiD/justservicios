//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JustServicios
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GestionEntities : DbContext
    {
        public GestionEntities()
            : base("name=GestionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<accesos> accesos { get; set; }
        public virtual DbSet<activida> activida { get; set; }
        public virtual DbSet<clicta> clicta { get; set; }
        public virtual DbSet<cliente> cliente { get; set; }
        public virtual DbSet<concepto> concepto { get; set; }
        public virtual DbSet<condpago> condpago { get; set; }
        public virtual DbSet<configen> configen { get; set; }
        public virtual DbSet<cuentas> cuentas { get; set; }
        public virtual DbSet<departamentos> departamentos { get; set; }
        public virtual DbSet<detmovim> detmovim { get; set; }
        public virtual DbSet<empresa> empresa { get; set; }
        public virtual DbSet<factura> factura { get; set; }
        public virtual DbSet<iva> iva { get; set; }
        public virtual DbSet<ivaart> ivaart { get; set; }
        public virtual DbSet<ivaven> ivaven { get; set; }
        public virtual DbSet<localidades> localidades { get; set; }
        public virtual DbSet<marcas> marcas { get; set; }
        public virtual DbSet<monedas> monedas { get; set; }
        public virtual DbSet<PedidoCab> PedidoCab { get; set; }
        public virtual DbSet<PedidoDet> PedidoDet { get; set; }
        public virtual DbSet<presupc> presupc { get; set; }
        public virtual DbSet<presupd> presupd { get; set; }
        public virtual DbSet<provee> provee { get; set; }
        public virtual DbSet<provincias> provincias { get; set; }
        public virtual DbSet<rubros> rubros { get; set; }
        public virtual DbSet<stock> stock { get; set; }
        public virtual DbSet<subrub> subrub { get; set; }
        public virtual DbSet<tipoart> tipoart { get; set; }
        public virtual DbSet<tipocomprobante> tipocomprobante { get; set; }
        public virtual DbSet<tipodoc> tipodoc { get; set; }
        public virtual DbSet<token> token { get; set; }
        public virtual DbSet<transpo> transpo { get; set; }
        public virtual DbSet<unimed> unimed { get; set; }
        public virtual DbSet<vende> vende { get; set; }
        public virtual DbSet<zonas> zonas { get; set; }
        public virtual DbSet<artasoc> artasoc { get; set; }
        public virtual DbSet<artprove> artprove { get; set; }
        public virtual DbSet<caja> caja { get; set; }
        public virtual DbSet<cheques> cheques { get; set; }
        public virtual DbSet<clictad> clictad { get; set; }
        public virtual DbSet<colores> colores { get; set; }
        public virtual DbSet<componen> componen { get; set; }
        public virtual DbSet<conceptosincluidos> conceptosincluidos { get; set; }
        public virtual DbSet<descxrub> descxrub { get; set; }
        public virtual DbSet<detcompr> detcompr { get; set; }
        public virtual DbSet<documen> documen { get; set; }
        public virtual DbSet<factu> factu { get; set; }
        public virtual DbSet<informe> informe { get; set; }
        public virtual DbSet<ivacom> ivacom { get; set; }
        public virtual DbSet<movstock> movstock { get; set; }
        public virtual DbSet<padronib> padronib { get; set; }
        public virtual DbSet<premito> premito { get; set; }
        public virtual DbSet<proctad> proctad { get; set; }
        public virtual DbSet<RemitoCab> RemitoCab { get; set; }
        public virtual DbSet<RemitoDet> RemitoDet { get; set; }
        public virtual DbSet<sucursal> sucursal { get; set; }
        public virtual DbSet<usu_acce> usu_acce { get; set; }
        public virtual DbSet<via> via { get; set; }
        public virtual DbSet<clienteModal> clienteModal { get; set; }
        public virtual DbSet<ClientePesupuesto> ClientePesupuesto { get; set; }
        public virtual DbSet<LIvaComp> LIvaComp { get; set; }
        public virtual DbSet<LOpxRubro> LOpxRubro { get; set; }
        public virtual DbSet<LPrecios> LPrecios { get; set; }
        public virtual DbSet<LRemitosEmitidosDetalle> LRemitosEmitidosDetalle { get; set; }
        public virtual DbSet<LVentasPorProductodsadsdassd> LVentasPorProductodsadsdassd { get; set; }
        public virtual DbSet<MonedasconSaldoAcumulado> MonedasconSaldoAcumulado { get; set; }
        public virtual DbSet<monedaxEmpresa> monedaxEmpresa { get; set; }
        public virtual DbSet<PuntodeVentaporEmpresa> PuntodeVentaporEmpresa { get; set; }
        public virtual DbSet<RemitosEmitidosCab> RemitosEmitidosCab { get; set; }
        public virtual DbSet<stocks> stocks { get; set; }
        public virtual DbSet<UbicacionporDepositoEmpresa> UbicacionporDepositoEmpresa { get; set; }
        public virtual DbSet<VArtVen> VArtVen { get; set; }
        public virtual DbSet<VCliente2> VCliente2 { get; set; }
        public virtual DbSet<VCobranza2> VCobranza2 { get; set; }
        public virtual DbSet<VCobranzas> VCobranzas { get; set; }
        public virtual DbSet<VivaVen> VivaVen { get; set; }
        public virtual DbSet<VivaVendd> VivaVendd { get; set; }
        public virtual DbSet<VivaVenpp> VivaVenpp { get; set; }
        public virtual DbSet<VRemDet> VRemDet { get; set; }
        public virtual DbSet<VRemitos> VRemitos { get; set; }
        public virtual DbSet<VSaldoCli> VSaldoCli { get; set; }
        public virtual DbSet<VStock> VStock { get; set; }
        public virtual DbSet<VStockC> VStockC { get; set; }
        public virtual DbSet<VStockItems> VStockItems { get; set; }
        public virtual DbSet<vVendedores> vVendedores { get; set; }
        public virtual DbSet<passwd> passwd { get; set; }
        public virtual DbSet<RWRefCliente> RWRefCliente { get; set; }
        public virtual DbSet<VCobran> VCobran { get; set; }
        public virtual DbSet<vistacomprabantepresupuesto> vistacomprabantepresupuesto { get; set; }
    
        [DbFunction("GestionEntities", "Cotimesxmes")]
        public virtual IQueryable<Cotimesxmes_Result> Cotimesxmes(Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta, Nullable<int> empresa)
        {
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Cotimesxmes_Result>("[GestionEntities].[Cotimesxmes](@desde, @hasta, @Empresa)", desdeParameter, hastaParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "CotimesxmesAgrupCliente")]
        public virtual IQueryable<CotimesxmesAgrupCliente_Result> CotimesxmesAgrupCliente(Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta, Nullable<int> empresa)
        {
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CotimesxmesAgrupCliente_Result>("[GestionEntities].[CotimesxmesAgrupCliente](@desde, @hasta, @Empresa)", desdeParameter, hastaParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "CotimesxmesAgrupProd")]
        public virtual IQueryable<CotimesxmesAgrupProd_Result> CotimesxmesAgrupProd(Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta, Nullable<int> empresa)
        {
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CotimesxmesAgrupProd_Result>("[GestionEntities].[CotimesxmesAgrupProd](@desde, @hasta, @Empresa)", desdeParameter, hastaParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "FlistPuntoPedido")]
        public virtual IQueryable<FlistPuntoPedido_Result> FlistPuntoPedido(Nullable<int> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FlistPuntoPedido_Result>("[GestionEntities].[FlistPuntoPedido](@Empresa)", empresaParameter);
        }
    
        [DbFunction("GestionEntities", "FWmasDatos")]
        public virtual IQueryable<FWmasDatos_Result> FWmasDatos(Nullable<int> nrocli)
        {
            var nrocliParameter = nrocli.HasValue ?
                new ObjectParameter("nrocli", nrocli) :
                new ObjectParameter("nrocli", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FWmasDatos_Result>("[GestionEntities].[FWmasDatos](@nrocli)", nrocliParameter);
        }
    
        [DbFunction("GestionEntities", "LArtVendAgrupando")]
        public virtual IQueryable<LArtVendAgrupando_Result> LArtVendAgrupando(Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst, Nullable<int> empresa)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LArtVendAgrupando_Result>("[GestionEntities].[LArtVendAgrupando](@dsd, @hst, @empresa)", dsdParameter, hstParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "LArtVendxVende")]
        public virtual IQueryable<LArtVendxVende_Result> LArtVendxVende(Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst, Nullable<int> empresa)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LArtVendxVende_Result>("[GestionEntities].[LArtVendxVende](@dsd, @hst, @empresa)", dsdParameter, hstParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "lArtxProveedor")]
        public virtual IQueryable<lArtxProveedor_Result> lArtxProveedor(Nullable<int> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<lArtxProveedor_Result>("[GestionEntities].[lArtxProveedor](@empresa)", empresaParameter);
        }
    
        [DbFunction("GestionEntities", "lCliente")]
        public virtual IQueryable<lCliente_Result> lCliente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<lCliente_Result>("[GestionEntities].[lCliente]()");
        }
    
        [DbFunction("GestionEntities", "LClientes")]
        public virtual IQueryable<LClientes_Result> LClientes(Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LClientes_Result>("[GestionEntities].[LClientes](@dsd, @hst)", dsdParameter, hstParameter);
        }
    
        [DbFunction("GestionEntities", "LFOpxRubro")]
        public virtual IQueryable<LFOpxRubro_Result> LFOpxRubro(Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst, Nullable<int> empresa)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LFOpxRubro_Result>("[GestionEntities].[LFOpxRubro](@dsd, @hst, @empresa)", dsdParameter, hstParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "LFOpxRubroCompra")]
        public virtual IQueryable<LFOpxRubroCompra_Result> LFOpxRubroCompra(Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst, Nullable<int> empresa)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LFOpxRubroCompra_Result>("[GestionEntities].[LFOpxRubroCompra](@dsd, @hst, @empresa)", dsdParameter, hstParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "LInforme")]
        public virtual IQueryable<LInforme_Result> LInforme()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LInforme_Result>("[GestionEntities].[LInforme]()");
        }
    
        [DbFunction("GestionEntities", "LIvaVen")]
        public virtual IQueryable<LIvaVen_Result> LIvaVen(Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst, Nullable<int> empresa)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LIvaVen_Result>("[GestionEntities].[LIvaVen](@dsd, @hst, @empresa)", dsdParameter, hstParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "LOrdenesDeCompraPendientes")]
        public virtual IQueryable<LOrdenesDeCompraPendientes_Result> LOrdenesDeCompraPendientes(Nullable<int> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LOrdenesDeCompraPendientes_Result>("[GestionEntities].[LOrdenesDeCompraPendientes](@Empresa)", empresaParameter);
        }
    
        [DbFunction("GestionEntities", "lPais")]
        public virtual IQueryable<lPais_Result> lPais()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<lPais_Result>("[GestionEntities].[lPais]()");
        }
    
        [DbFunction("GestionEntities", "lProvee")]
        public virtual IQueryable<lProvee_Result> lProvee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<lProvee_Result>("[GestionEntities].[lProvee]()");
        }
    
        [DbFunction("GestionEntities", "LsaldoCli")]
        public virtual IQueryable<LsaldoCli_Result> LsaldoCli(Nullable<int> empresa, Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LsaldoCli_Result>("[GestionEntities].[LsaldoCli](@Empresa, @dsd, @hst)", empresaParameter, dsdParameter, hstParameter);
        }
    
        [DbFunction("GestionEntities", "LsaldoDeudores")]
        public virtual IQueryable<LsaldoDeudores_Result> LsaldoDeudores(Nullable<int> empresa, Nullable<System.DateTime> fechaAcre)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            var fechaAcreParameter = fechaAcre.HasValue ?
                new ObjectParameter("fechaAcre", fechaAcre) :
                new ObjectParameter("fechaAcre", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LsaldoDeudores_Result>("[GestionEntities].[LsaldoDeudores](@Empresa, @fechaAcre)", empresaParameter, fechaAcreParameter);
        }
    
        [DbFunction("GestionEntities", "LSaldoDeudores2")]
        public virtual IQueryable<LSaldoDeudores2_Result> LSaldoDeudores2(Nullable<int> empresa, Nullable<System.DateTime> fechaAcre)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var fechaAcreParameter = fechaAcre.HasValue ?
                new ObjectParameter("fechaAcre", fechaAcre) :
                new ObjectParameter("fechaAcre", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LSaldoDeudores2_Result>("[GestionEntities].[LSaldoDeudores2](@empresa, @fechaAcre)", empresaParameter, fechaAcreParameter);
        }
    
        [DbFunction("GestionEntities", "lstock")]
        public virtual IQueryable<lstock_Result> lstock(Nullable<int> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<lstock_Result>("[GestionEntities].[lstock](@empresa)", empresaParameter);
        }
    
        [DbFunction("GestionEntities", "LStockActua")]
        public virtual IQueryable<LStockActua_Result> LStockActua(Nullable<decimal> empresa, Nullable<int> precio)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(decimal));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LStockActua_Result>("[GestionEntities].[LStockActua](@Empresa, @precio)", empresaParameter, precioParameter);
        }
    
        [DbFunction("GestionEntities", "lTransporte")]
        public virtual IQueryable<lTransporte_Result> lTransporte()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<lTransporte_Result>("[GestionEntities].[lTransporte]()");
        }
    
        [DbFunction("GestionEntities", "LVentasPorProducto")]
        public virtual IQueryable<LVentasPorProducto_Result> LVentasPorProducto(Nullable<int> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LVentasPorProducto_Result>("[GestionEntities].[LVentasPorProducto](@Empresa)", empresaParameter);
        }
    
        [DbFunction("GestionEntities", "LWPedPendientes")]
        public virtual IQueryable<LWPedPendientes_Result> LWPedPendientes(Nullable<int> empresa, Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LWPedPendientes_Result>("[GestionEntities].[LWPedPendientes](@empresa, @dsd, @hst)", empresaParameter, dsdParameter, hstParameter);
        }
    
        [DbFunction("GestionEntities", "LWPresup")]
        public virtual IQueryable<LWPresup_Result> LWPresup(Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst, Nullable<int> empresa)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LWPresup_Result>("[GestionEntities].[LWPresup](@dsd, @hst, @empresa)", dsdParameter, hstParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "lZonas")]
        public virtual IQueryable<lZonas_Result> lZonas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<lZonas_Result>("[GestionEntities].[lZonas]()");
        }
    
        [DbFunction("GestionEntities", "NoVendidos")]
        public virtual IQueryable<NoVendidos_Result> NoVendidos(Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta, Nullable<int> empresa)
        {
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<NoVendidos_Result>("[GestionEntities].[NoVendidos](@desde, @hasta, @empresa)", desdeParameter, hastaParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "PadronIIBBporCuit")]
        public virtual IQueryable<PadronIIBBporCuit_Result> PadronIIBBporCuit(string cuit)
        {
            var cuitParameter = cuit != null ?
                new ObjectParameter("cuit", cuit) :
                new ObjectParameter("cuit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PadronIIBBporCuit_Result>("[GestionEntities].[PadronIIBBporCuit](@cuit)", cuitParameter);
        }
    
        [DbFunction("GestionEntities", "PadronIIBBxCuityProv")]
        public virtual IQueryable<PadronIIBBxCuityProv_Result> PadronIIBBxCuityProv(string cuit)
        {
            var cuitParameter = cuit != null ?
                new ObjectParameter("cuit", cuit) :
                new ObjectParameter("cuit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PadronIIBBxCuityProv_Result>("[GestionEntities].[PadronIIBBxCuityProv](@cuit)", cuitParameter);
        }
    
        [DbFunction("GestionEntities", "SaldoClientesAllGroup")]
        public virtual IQueryable<SaldoClientesAllGroup_Result> SaldoClientesAllGroup(Nullable<int> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SaldoClientesAllGroup_Result>("[GestionEntities].[SaldoClientesAllGroup](@Empresa)", empresaParameter);
        }
    
        [DbFunction("GestionEntities", "SaldoProveedoresAllGroup")]
        public virtual IQueryable<SaldoProveedoresAllGroup_Result> SaldoProveedoresAllGroup(Nullable<int> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SaldoProveedoresAllGroup_Result>("[GestionEntities].[SaldoProveedoresAllGroup](@Empresa)", empresaParameter);
        }
    
        [DbFunction("GestionEntities", "stockPresupuesto")]
        public virtual IQueryable<stockPresupuesto_Result> stockPresupuesto(Nullable<int> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<stockPresupuesto_Result>("[GestionEntities].[stockPresupuesto](@empresa)", empresaParameter);
        }
    
        [DbFunction("GestionEntities", "stocksF")]
        public virtual IQueryable<stocksF_Result> stocksF(Nullable<int> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<stocksF_Result>("[GestionEntities].[stocksF](@Empresa)", empresaParameter);
        }
    
        [DbFunction("GestionEntities", "StockValorizado")]
        public virtual IQueryable<StockValorizado_Result> StockValorizado(Nullable<int> empresa, Nullable<int> precio)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<StockValorizado_Result>("[GestionEntities].[StockValorizado](@empresa, @precio)", empresaParameter, precioParameter);
        }
    
        [DbFunction("GestionEntities", "sucursalesCliente")]
        public virtual IQueryable<sucursalesCliente_Result> sucursalesCliente(Nullable<int> nrocli)
        {
            var nrocliParameter = nrocli.HasValue ?
                new ObjectParameter("nrocli", nrocli) :
                new ObjectParameter("nrocli", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<sucursalesCliente_Result>("[GestionEntities].[sucursalesCliente](@nrocli)", nrocliParameter);
        }
    
        [DbFunction("GestionEntities", "WCliente")]
        public virtual IQueryable<WCliente_Result> WCliente(Nullable<int> vende, string dia, Nullable<int> empresa)
        {
            var vendeParameter = vende.HasValue ?
                new ObjectParameter("vende", vende) :
                new ObjectParameter("vende", typeof(int));
    
            var diaParameter = dia != null ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(string));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<WCliente_Result>("[GestionEntities].[WCliente](@vende, @dia, @empresa)", vendeParameter, diaParameter, empresaParameter);
        }
    
        [DbFunction("GestionEntities", "WpuntoPorEmpresa")]
        public virtual IQueryable<WpuntoPorEmpresa_Result> WpuntoPorEmpresa(Nullable<int> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<WpuntoPorEmpresa_Result>("[GestionEntities].[WpuntoPorEmpresa](@empresa)", empresaParameter);
        }
    
        public virtual ObjectResult<ArmaMenuWeb_Result> ArmaMenuWeb(Nullable<int> empresa, Nullable<int> usuario)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArmaMenuWeb_Result>("ArmaMenuWeb", empresaParameter, usuarioParameter);
        }
    
        public virtual ObjectResult<ArmaPopupWeb_Result> ArmaPopupWeb(Nullable<int> empresa, Nullable<int> usuario)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArmaPopupWeb_Result>("ArmaPopupWeb", empresaParameter, usuarioParameter);
        }
    
        public virtual int CambioCodStk(string lccodpro, string lcNuevoCodpro)
        {
            var lccodproParameter = lccodpro != null ?
                new ObjectParameter("lccodpro", lccodpro) :
                new ObjectParameter("lccodpro", typeof(string));
    
            var lcNuevoCodproParameter = lcNuevoCodpro != null ?
                new ObjectParameter("lcNuevoCodpro", lcNuevoCodpro) :
                new ObjectParameter("lcNuevoCodpro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CambioCodStk", lccodproParameter, lcNuevoCodproParameter);
        }
    
        public virtual int liquidarIvaVen(Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst, Nullable<decimal> vendedor, Nullable<decimal> cotizaciones)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            var vendedorParameter = vendedor.HasValue ?
                new ObjectParameter("vendedor", vendedor) :
                new ObjectParameter("vendedor", typeof(decimal));
    
            var cotizacionesParameter = cotizaciones.HasValue ?
                new ObjectParameter("cotizaciones", cotizaciones) :
                new ObjectParameter("cotizaciones", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("liquidarIvaVen", dsdParameter, hstParameter, vendedorParameter, cotizacionesParameter);
        }
    
        public virtual int SP_CotiMesAMes(Nullable<int> dsd, string empresa, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(int));
    
            var empresaParameter = empresa != null ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(string));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("Desde", desde) :
                new ObjectParameter("Desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("Hasta", hasta) :
                new ObjectParameter("Hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CotiMesAMes", dsdParameter, empresaParameter, desdeParameter, hastaParameter);
        }
    
        public virtual int SP_CotiMesAMesModificado(Nullable<int> dsd, string empresa, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta, string query)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(int));
    
            var empresaParameter = empresa != null ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(string));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("Desde", desde) :
                new ObjectParameter("Desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("Hasta", hasta) :
                new ObjectParameter("Hasta", typeof(System.DateTime));
    
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CotiMesAMesModificado", dsdParameter, empresaParameter, desdeParameter, hastaParameter, queryParameter);
        }
    
        public virtual ObjectResult<sp_NoVendidos_Result> sp_NoVendidos(Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta, Nullable<int> empresa, Nullable<bool> incluirCoti)
        {
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var incluirCotiParameter = incluirCoti.HasValue ?
                new ObjectParameter("incluirCoti", incluirCoti) :
                new ObjectParameter("incluirCoti", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NoVendidos_Result>("sp_NoVendidos", desdeParameter, hastaParameter, empresaParameter, incluirCotiParameter);
        }
    
        public virtual ObjectResult<sp_PuntoPedido_Result> sp_PuntoPedido(Nullable<int> incluye, Nullable<int> empresa, Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst)
        {
            var incluyeParameter = incluye.HasValue ?
                new ObjectParameter("incluye", incluye) :
                new ObjectParameter("incluye", typeof(int));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PuntoPedido_Result>("sp_PuntoPedido", incluyeParameter, empresaParameter, dsdParameter, hstParameter);
        }
    
        public virtual int SP_VentasMesAMes(Nullable<int> dsd, string empresa, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta, string query)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(int));
    
            var empresaParameter = empresa != null ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(string));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("Desde", desde) :
                new ObjectParameter("Desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("Hasta", hasta) :
                new ObjectParameter("Hasta", typeof(System.DateTime));
    
            var queryParameter = query != null ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VentasMesAMes", dsdParameter, empresaParameter, desdeParameter, hastaParameter, queryParameter);
        }
    
        public virtual ObjectResult<StockxArticulo_Result> StockxArticulo(Nullable<decimal> empresa)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockxArticulo_Result>("StockxArticulo", empresaParameter);
        }
    
        [DbFunction("GestionEntities", "LStockActua1")]
        public virtual IQueryable<LStockActua1_Result> LStockActua1(Nullable<decimal> empresa, Nullable<int> precio)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(decimal));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LStockActua1_Result>("[GestionEntities].[LStockActua1](@Empresa, @precio)", empresaParameter, precioParameter);
        }
    
        [DbFunction("GestionEntities", "FCobranzas")]
        public virtual IQueryable<FCobranzas_Result> FCobranzas(Nullable<System.DateTime> dsd, Nullable<System.DateTime> hst, Nullable<int> empresa, Nullable<int> comi)
        {
            var dsdParameter = dsd.HasValue ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(System.DateTime));
    
            var hstParameter = hst.HasValue ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(System.DateTime));
    
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var comiParameter = comi.HasValue ?
                new ObjectParameter("comi", comi) :
                new ObjectParameter("comi", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FCobranzas_Result>("[GestionEntities].[FCobranzas](@dsd, @hst, @empresa, @comi)", dsdParameter, hstParameter, empresaParameter, comiParameter);
        }
    
        [DbFunction("GestionEntities", "FComisiones")]
        public virtual IQueryable<FComisiones_Result> FComisiones(Nullable<int> empresa, string dsd, string hst, Nullable<int> comis)
        {
            var empresaParameter = empresa.HasValue ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(int));
    
            var dsdParameter = dsd != null ?
                new ObjectParameter("dsd", dsd) :
                new ObjectParameter("dsd", typeof(string));
    
            var hstParameter = hst != null ?
                new ObjectParameter("hst", hst) :
                new ObjectParameter("hst", typeof(string));
    
            var comisParameter = comis.HasValue ?
                new ObjectParameter("comis", comis) :
                new ObjectParameter("comis", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FComisiones_Result>("[GestionEntities].[FComisiones](@empresa, @dsd, @hst, @comis)", empresaParameter, dsdParameter, hstParameter, comisParameter);
        }
    }
}
